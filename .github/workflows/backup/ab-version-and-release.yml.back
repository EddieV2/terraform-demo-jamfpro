name: "Versioning and Release"

on:
  workflow_dispatch:
    inputs:
      source_environment:
        description: 'Source environment'
        required: true
        type: choice
        options:
          - sandbox
          - staging
      target_environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - staging
          - production
      debug:
        description: 'Enable Debug mode'
        required: false
        default: 'false'

env:
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  CONFIG_DIRECTORY: "workload/terraform/jamfpro"
  source_environment: sandbox
  target_environment: staging

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Validate environment inputs
        run: |
          if [[ "${{ github.event.inputs.source_environment }}" == "sandbox" && "${{ github.event.inputs.target_environment }}" == "production" ]]; then
            echo "Error: Cannot create PR from sandbox to production."
            exit 1
          fi
          if [[ "${{ github.event.inputs.source_environment }}" == "${{ github.event.inputs.target_environment }}" ]]; then
            echo "Error: Source and target environments cannot be the same."
            exit 1
          fi

  create-version-and-release:
    needs: validate-inputs
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.combine_version_hash.outputs.new_version }}
      config_hash: ${{ steps.generate_hash.outputs.config_hash }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.source_environment }}

      - name: Set up Python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: '3.x'

      - name: Determine release version
        id: determine_version
        run: python workload/scripts/version_determinator.py '${{ env.CONFIG_DIRECTORY }}'

      - name: Generate release hash
        id: generate_hash
        run: python workload/scripts/hash_generator.py '${{ env.CONFIG_DIRECTORY }}'

      - name: Combine version and hash
        id: combine_version_hash
        run: |
          NEW_VERSION="${{ steps.determine_version.outputs.version }}-${{ steps.generate_hash.outputs.config_hash }}"
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          echo "CONFIG_HASH=${{ steps.generate_hash.outputs.config_hash }}" >> $GITHUB_ENV

      - name: Display new release version
        if: ${{ github.event.inputs.debug == 'true' }}
        run: |
          echo "New version: ${{ env.NEW_VERSION }}"

      - name: Create and push new tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ env.NEW_VERSION }}
          git push origin ${{ env.NEW_VERSION }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2.0.8
        with:
          tag_name: ${{ env.NEW_VERSION }}
          name: Release ${{ env.NEW_VERSION }}
          body: |
            This release was manually triggered by @${{ github.actor }}.
            Source: ${{ github.event.inputs.source_environment }}
            Target: ${{ github.event.inputs.target_environment }}
            Configuration Hash: ${{ env.CONFIG_HASH }}
          draft: false
          prerelease: ${{ github.event.inputs.target_environment != 'production' }}
          files: |
            ${{ env.CONFIG_DIRECTORY }}/**/*.tf
            README.md
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push release branch
        id: create_release_branch
        run: |
          git checkout -b release-${{ env.NEW_VERSION }}
          git push origin release-${{ env.NEW_VERSION }}

  terraform-plan:
    needs: create-version-and-release
    uses: ./.github/workflows/terraform-plan.yml
    with:
      tf_cloud_organization: "deploymenttheory"
      tf_workspace: "terraform-jamfpro-staging" 
      target_environment: ${{ github.event.inputs.target_environment }}
      debug: ${{ github.event.inputs.debug == 'true' }}
      config_directory: "workload/terraform/jamfpro"
      new_version: ${{ needs.create-version-and-release.outputs.new_version }}
    secrets:
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

  send-notification:
    needs: [create-version-and-release, terraform-plan]
    if: always()
    uses: ./.github/workflows/send-notification.yml
    with:
      environment: ${{ github.event.inputs.target_environment }}
      result: ${{ needs.terraform-plan.result == 'success' && 'success' || 'failure' }}
      notification_channel: msteams
      new_version: ${{ needs.create-version-and-release.outputs.new_version }}
    secrets: inherit