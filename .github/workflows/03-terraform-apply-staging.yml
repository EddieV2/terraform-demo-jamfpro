name: "03 - terraform apply: staging"

on:
  pull_request:
    types: [closed]
    branches: [staging]

env:
  TF_CLOUD_ORGANIZATION: "deploymenttheory"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "terraform-jamfpro-staging"
  CONFIG_DIRECTORY: "workload/terraform/jamfpro"
  PIPELINE_DEBUG: "true"

permissions:
  contents: read
  id-token: write

jobs:
  terraform-apply:
    name: "Terraform Apply to Staging"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.1
        id: apply-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}

      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.1
        id: apply-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}

      - name: Apply
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.3.1
        if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"

  branch-cleanup:
    needs: [terraform-apply]
    runs-on: ubuntu-latest
    steps:
      - name: Get branch name
        id: get_branch
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Delete release branch
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const branchName = '${{ steps.get_branch.outputs.branch_name }}';
            console.log(`Attempting to delete branch: ${branchName}`);
            try {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${branchName}`
              });
              console.log(`Successfully deleted branch: ${branchName}`);
            } catch (error) {
              if (error.status === 422) {
                console.log(`Branch ${branchName} does not exist or has already been deleted.`);
              } else {
                console.error(`Error deleting branch ${branchName}:`, error);
                core.setFailed(`Failed to delete branch ${branchName}`);
              }
            }

  send-notification:
    needs: [terraform-apply]
    if: always()
    uses: ./.github/workflows/send-notification.yml
    with:
      environment: "Staging"
      result: ${{ needs.terraform-apply.result == 'success' && 'success' || 'failure' }}
      notification_channel: msteams
    secrets: inherit